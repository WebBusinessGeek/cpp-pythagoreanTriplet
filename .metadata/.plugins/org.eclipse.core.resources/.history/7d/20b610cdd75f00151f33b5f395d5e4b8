/*
 * Algorithm.cpp
 *
 *  Created on: Sep 18, 2015
 *      Author: MacBookEr
 */

#include "Algorithm.h"

Algorithm::Algorithm() {
	// TODO Auto-generated constructor stub
	this->testStatus = "Tests are working";
}

Algorithm::~Algorithm() {
	// TODO Auto-generated destructor stub
}

string Algorithm::getTestStatus() const {
	return this->testStatus;
}

vector <vector <int> > Algorithm::getFactorsForInteger(int integerToFactor) {
	int countStart = 1;
	vector <vector <int> > intVectorToReturn;
	vector <int> used;

	while(countStart < integerToFactor) {
		if(integerToFactor % countStart == 0) {
			bool alreadyInArray = false;
			for(int count = 0; count < used.size(); count++) {
				if(used[count] == countStart) {
					alreadyInArray = true;
				}
			}
			if(!alreadyInArray) {
				vector <int> tempVector;
				tempVector.push_back(countStart);
				tempVector.push_back(integerToFactor / countStart);
				intVectorToReturn.push_back(tempVector);
				used.push_back(countStart);
				used.push_back(integerToFactor / countStart);
			}

		}
		countStart++;
	}
	return intVectorToReturn;
}

int Algorithm::squareIntegerAndDivideInHalf(int integer) {
	return (integer * integer) / 2;
}

vector <vector <int> > Algorithm::findPythagoreanTriplets(int r, vector <vector <int>> factorialsOfRSquaredAndDividedInHalf) {
	int s = factorialsOfRSquaredAndDividedInHalf[0][0];
	int t = factorialsOfRSquaredAndDividedInHalf[0][1];
	int x = r + s;
	int y = r + t;
	int z = r + s + t;

}
